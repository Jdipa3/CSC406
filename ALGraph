package asgn01;

import java.util.ArrayList;
import java.util.Scanner;

public abstract class ALGraph extends Graph{

	protected ALNode[] theGraph;
	private boolean isDirected;

	public ALGraph(Scanner sc, boolean isWeighted, boolean isDirected){
		super(sc, isWeighted, isDirected, false);
		this.isDirected = isDirected;
	}

	public boolean existEdge(Edge e){
		for (int i = 0; i < allEdges.length; i++){
			if (allEdges[i] != null && allEdges[i].equals(e))
				return true;
		}
		return false;
	}

	public void putEdge(Edge e){
		theGraph[e.getBeginningNode().getNodeNum()] = new ALNode(e.getEndingNode(), e.getWeight(), theGraph[e.getBeginningNode().getNodeNum()]);
		for (int i = 0; i < allEdges.length; i++){
			if (allEdges[i] == null)
				allEdges[i] = e;
		}
		outDegree[e.getBeginningNode().getNodeNum()]++;
		inDegree[e.getEndingNode().getNodeNum()]++;
	}

	public void removeEdge(Edge e){

		ALNode currNode = theGraph[e.getBeginningNode().getNodeNum()];

		if (e.getEndingNode().equals(currNode.getNode())){
			theGraph[e.getBeginningNode().getNodeNum()] = currNode.getNextNode();
			for (int i = 0; i < allEdges.length; i++){
				if (allEdges[i] != null && allEdges[i].equals(e)){
					inDegree[e.getEndingNode().getNodeNum()]--;
					outDegree[e.getBeginningNode().getNodeNum()]--;
					allEdges[i] = null;
					break;
				}
			}
			return;
		}

		ALNode prevNode = currNode;
		currNode = currNode.getNextNode();

		while (currNode != null){
			if (e.getEndingNode().equals(currNode.getNode())){
				prevNode.setNextNode(currNode.getNextNode());
				for (int i = 0; i < allEdges.length; i++){
					if (allEdges[i].equals(e)){
						allEdges[i] = null;
						break;
					}
				}
				return;
			}
			prevNode = currNode;
			currNode = currNode.getNextNode();
		}

	}

	public int inDegree(Node n){
		return inDegree[n.getNodeNum()];
	}

	public int outDegree(Node n){
		return outDegree[n.getNodeNum()];
	}

	public ArrayList<Node> adjacentVertices(Node n){
		ArrayList<Node> vertices = new ArrayList<Node>();
		ALNode theNode = theGraph[n.getNodeNum()];
		while(theNode != null){
			vertices.add(theNode.getNode());
			theNode = theNode.getNextNode();
		}
		return vertices;
	}

	public boolean areAdjacent(Node n, Node o){
		
		ALNode theNode = theGraph[n.getNodeNum()];
		
		if (!isDirected){
			while(theNode != null){
				if (theNode.getNode().equals(o))
					return true;
				theNode = theNode.getNextNode();
			}
			theNode = theGraph[o.getNodeNum()];
			while(theNode != null){
				if (theNode.getNode().equals(n))
					return true;
				theNode = theNode.getNextNode();
			}
		}
		else{
			theNode = theGraph[o.getNodeNum()];
			while(theNode != null){
				if (theNode.getNode().equals(n))
					return true;
				theNode = theNode.getNextNode();
			}
		}
		return false;
	}

	public void initializeGraph(){
		theGraph = new ALNode[allNodes.length];
	}

	public boolean existEdge(int i, int j) { return false; }

	public void putEdge(int i, int j, int weight) { }

	public void removeEdge(int i, int j) { }

	public int degree(Node n){ return -1; }

	public int degree(int i) { return -1; }

	public int inDegree(int i) { return -1; }

	public int outDegree(int i) { return -1; }

	public ArrayList<Node> adjacentVertices(int i) { return null; }

	public boolean areAdjacent(int i, int j) { return false; }
}

