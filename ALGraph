package asgn02;

import java.util.ArrayList;
import java.util.Scanner;

public abstract class ALGraph extends Graph{

	protected ALNode[] theGraph;

	public ALGraph(Scanner sc){
		super(sc);
		theGraph = new ALNode[numNodes];
	}

	public abstract boolean existEdge(int i, int j);

	public abstract boolean putEdge(int i, int j, int weight);

	public abstract boolean removeEdge(int i, int j);

	public abstract int degree(int i);

	public abstract int inDegree(int i);

	public abstract int outDegree(int i);


	public ArrayList<Node> adjacentVertices(int i) {
		if (outBounds(i))
			return null;
		
		ArrayList<Node> adjNodes = new ArrayList<Node>();
		ALNode temp = theGraph[i];
		while (temp != null){
			adjNodes.add(temp.getNode());
			temp = temp.getNextNode();
		}
		return adjNodes;
	}

	public boolean areAdjacent(int i, int j) {
		if (outBounds(i) || outBounds(j))
			return false;

		ALNode temp = theGraph[i];
		if (temp != null){
			while(temp.hasNextNode()){
				if (temp.getNode().getNodeNum() == j)
					return true;
			}
		}
		return false;
	}
}

