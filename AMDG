package asgn02;

import java.util.ArrayList;
import java.util.Scanner;

//Adjacency Matrix Directed Graph
public class AMDG extends AMGraph{

	public AMDG(Scanner sc){
		super(sc);
		
		inDegree = new int[numNodes];
		outDegree = new int[numNodes];
		
		String[] theEdges = sc.nextLine().split(" ");
		
		for(int i = 0 ; i < theEdges.length; i+=2){
			putEdge(Integer.parseInt(theEdges[i]), Integer.parseInt(theEdges[i+1]), 0);
		}
	}

	public boolean existEdge(int i, int j) {
		if (outBounds(i) || outBounds(j))
			return false;
		
		if (theGraph[i][j] == 1)
			return true;
		return false;
	}

	public boolean putEdge(int i, int j, int weight) {
		if (outBounds(i) || outBounds(j))
			return false;
		
		theGraph[i][j] = 1;
		outDegree[i]++;
		inDegree[j]++;
		numEdges++;
		return true;
	}

	public boolean removeEdge(int i, int j) {
		if (outBounds(i) || outBounds(j))
			return false;
		
		theGraph[i][j] = 0;
		outDegree[i]--;
		inDegree[j]--;
		numEdges--;
		return true;
	}

	public int degree(int i) {
		return -1;
	}

	public int inDegree(int i) {
		if (outBounds(i))
			return -1;
		return inDegree[i];
	}

	public int outDegree(int i) {
		if (outBounds(i))
			return -1;
		return outDegree[i];
	}

	public ArrayList<Node> adjacentVertices(int i) {
		if (outBounds(i))
			return null;
		
		ArrayList<Node> adjNodes = new ArrayList<Node>();
		for (int j = 0; j < theGraph[i].length; j++){
			if (theGraph[i][j] == 1)
				adjNodes.add(new Node(j));
		}
		return adjNodes;
	}
}
