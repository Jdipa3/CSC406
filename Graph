package asgn02;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;

public abstract class Graph {

	protected int numNodes;
	protected int numEdges;
	protected int[] degree;
	protected int[] inDegree;
	protected int[] outDegree;

	public Graph(Scanner sc){
		numNodes = sc.nextInt();
		sc.nextInt();
		numEdges = 0;
	}

	public int numNodes(){
		return numNodes;
	}

	public int numEdges(){
		return numEdges;
	}
	
	public boolean outBounds(int i){
		if (i < 0 || i > numNodes)
			return true;
		return false;
	}
	
	public boolean existEdge(Edge e){
		return existEdge(e.getBeginningNode().getNodeNum(), e.getEndingNode().getNodeNum());
	}
	public abstract boolean existEdge(int i, int j);

	public boolean putEdge(Edge e){
		return putEdge(e.getBeginningNode().getNodeNum(), e.getEndingNode().getNodeNum(), e.getWeight());
	}
	public abstract boolean putEdge(int i, int j, int weight);

	public boolean removeEdge(Edge e){
		return removeEdge(e.getBeginningNode().getNodeNum(), e.getEndingNode().getNodeNum());
	}
	public abstract boolean removeEdge(int i, int j);

	public int degree(Node n){
		return degree(n.getNodeNum());
	}
	public abstract int degree(int i);

	public int inDegree(Node n){
		return inDegree(n.getNodeNum());
	}
	public abstract int inDegree(int i);

	public int outDegree(Node n){
		return outDegree(n.getNodeNum());
	}
	public abstract int outDegree(int i);

	public ArrayList<Node> adjacentVertices(Node n){
		return adjacentVertices(n.getNodeNum());
	}
	public abstract ArrayList<Node> adjacentVertices(int i);

	public boolean areAdjacent(Node n, Node i){
		return areAdjacent(n.getNodeNum(), i.getNodeNum());
	}
	public abstract boolean areAdjacent(int i, int j);

}
